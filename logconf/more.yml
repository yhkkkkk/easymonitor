filebeat.inputs:
  - type: log
    enabled: true
    encoding: utf-8
    paths:
      - /data/logs/supervisor/huihao/hh_backend_ihospital_spi_impl_changhai.log*
    fields:
      env: "test1"
      log_type: "hhlyxh_backend_ihospital_spi_impl_changhai_log"
    # include_lines: ['(?i)error'] # 只包含error(忽略大小写)的日志 也可去掉去kibana过滤
    include_lines: ['.*(error|ERROR)[ ]\d(.)*\n'] # 只包含error(忽略大小写)的日志 也可去掉去kibana过滤
    multiline.type: pattern
    multiline.pattern: '^\d{4}'
    multiline.negate: true
    multiline.match: after
    multiline.max_lines: 1000 # 最多合并1000行
    multiline.timeout: 30s # 30s无响应则取消合并
    max_procs: 4
    ignore_older: 168h
    max_bytes: 10485760
    scan_frequency: 10s
    tail_files: false
    reload.enabled: true
    reload.period: 10s
  - type: log
    enabled: true
    encoding: utf-8
    paths:
      - /data/logs/supervisor/huijian/lyxh_backend_doctor_pc_server_changhai.log*
    fields:
      env: "test1"
      log_type: "hhlyxh_backend_doctor_pc_server_changhai_log"
    # include_lines: ['(?i)error'] # 只包含error(忽略大小写)的日志 也可去掉去kibana过滤
    include_lines: ['.*(error|ERROR)[ ]\d(.)*\n'] # 只包含error(忽略大小写)的日志 也可去掉收集所以日志
    multiline.type: pattern
    multiline.pattern: '^\d{4}'
    multiline.negate: true
    multiline.match: after
    multiline.max_lines: 1000 # 最多合并1000行
    multiline.timeout: 30s # 30s无响应则取消合并
    max_procs: 4
    ignore_older: 720h
    max_bytes: 10485760
    scan_frequency: 10s
    tail_files: false
    reload.enabled: true
    reload.period: 10s
  - type: log
    enabled: true
    encoding: utf-8
    paths:
      - /data/logs/supervisor/shennong/hh_backend_xxl_job_admin.log*
    fields:
      env: "test1"
      log_type: "hhlyxh_backend_xxl_job_admin_log"
    # include_lines: ['(?i)error'] # 只包含error(忽略大小写)的日志 也可去掉去kibana过滤
    include_lines: ['.*(error|ERROR)[ ]\d(.)*\n'] # 只包含error(忽略大小写)的日志 也可去掉收集所以日志
    multiline.type: pattern
    multiline.pattern: '^\d{4}'
    multiline.negate: true
    multiline.match: after
    multiline.max_lines: 1000 # 最多合并1000行
    multiline.timeout: 30s # 30s无响应则取消合并
    max_procs: 4
    ignore_older: 168h
    max_bytes: 10485760
    scan_frequency: 10s
    tail_files: false
    reload.enabled: true
    reload.period: 10s

logging.level: debug

filebeat.config.modules:
  path: ${path.config}/modules.d/*.yml
  reload.enabled: false

setup.template.settings:
  index.number_of_shards: 1

# 设置索引模板名称 该模版应用于所以以hh_backend开头的索引
setup.template.name: "hhlyxh_backend"
setup.template.pattern: "hhlyxh_backend-*"
setup.template.enabled: true
setup.template.overwrite: true

setup.ilm.enabled: true
setup.ilm.policy_name: "monthly_policy"
setup.ilm.rollover_alias: "hhlyxh_backend-alias"
#setup.ilm.pattern: "{now/MM}-000001"
setup.ilm.pattern: "{now/M}-000001"
setup.ilm.policy_file: /data/filebeat/filebeat-7.12.0-linux-x86_64/ilm_policy.json

#output.console:
#  pretty: true

output.elasticsearch:
  hosts: ["http://172.16.38.247:10200"]
  username: "elastic"
  password: "wxQY2NxAakbK613s9JS6"
  index: "%{[fields.log_type]}-%{+yyyy.MM}" # 指定索引就用index: "hj_v4_backend-%{+yyyy.MM}"
  # indices:
  #   - index: "hj_v4_backend_server_log-%{+yyyy.MM.dd}"
  #     when.contains:
  #       fields:
  #         tag: "hj_v4_backend_server"
  #   - index: "hj_v4_backend_patient_server_log-%{+yyyy.MM.dd}"
  #     when.contains:
  #       fields:
  #         tag: "hj_v4_backend_patient_server"

processors:
  - script:
      lang: javascript
      id: format_time
      tag: enable
      source: >
        function process(event) {
            // 提取时间
            var str= event.Get("message");
            var time =str.split(" ").slice(0,2).join(" ");
            //var regex = /\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}/;
            //var match = str.match(regex);
            //if (match) {
            event.Put("format_time", time);
            //}
            // 提取错误类型
            var error = /(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3})\s+(\w+) \d+ --- \[.*?\] .*? : (.*?)(?=\n|$)/;
            var error_type = str.match(error);
            if (error_type) {
              event.Put("grep_level", error_type[2]);
              event.Put("log_type", error_type[3]);
            } else {
              event.Put("grep_level", "null");
              event.Put("log_type", "null");
            }
        }
  - timestamp:
      field: format_time
      # target_field: log_time
      timezone: Asia/Shanghai
      # timezone: UTC
      # layouts和test的时间不能完全一样
      layouts:
        - '2006-01-02 15:04:05.000'
      test:
        - '2024-02-23 18:32:00.480'
      parse_timezone: true
      overwrite: true
  - dissect:
      tokenizer: "%{logDate} %{logTime} %{logLevel} %{pid} --- [%{thread}] %{logger} : %{message_less} %{errorStack}"
      field: "message"
      target_prefix: "dissect"
  - add_host_metadata: ~
  - add_locale: ~
  - drop_fields:
      fields: ["input", "container",  "agent", "event", "ecs", "format_time"]
  # - include_fields:
  #     fields: ["field1", "field2"]
  # - add_fields:
  #     target: 'custom'
  #     fields:
  #       field1: 'value1'
  #       field2: 'value2'
  # 解析json格式的日志(暂时没用到)
  # - decode_json_fields:
  #     fields: ["message"]
  #     target: "json"

# 设置内存中的事件数量
filebeat.spool_size: 4096
# 设置每个harvester的读取缓冲区大小
filebeat.harvester_buffer_size: 16384
